
lab5_pap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f0  080039f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039f8  080039f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000011c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b589  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b7e  00000000  00000000  0002b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000be8  00000000  00000000  0002d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000093b  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020149  00000000  00000000  0002e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d13b  00000000  00000000  0004e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6bc0  00000000  00000000  0005b92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003208  00000000  00000000  001224f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001256f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039c4 	.word	0x080039c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039c4 	.word	0x080039c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc26 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f956 	bl	8000780 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d4:	f000 f874 	bl	80005c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004d8:	f000 f8a8 	bl	800062c <MX_SPI2_Init>
  MX_TIM2_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <main+0x24>)
 80004e2:	f002 fb47 	bl	8002b74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x22>
 80004e8:	200000d8 	.word	0x200000d8

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fa36 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000548:	2302      	movs	r3, #2
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	2310      	movs	r3, #16
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000558:	2300      	movs	r3, #0
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800055c:	2308      	movs	r3, #8
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000568:	2307      	movs	r3, #7
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ff2d 	bl	80013d0 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800057c:	f000 f960 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800058c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f98e 	bl	80018c0 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005aa:	f000 f949 	bl	8000840 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_SPI1_Init+0x64>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <MX_SPI1_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_SPI1_Init+0x64>)
 80005cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_SPI1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_SPI1_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI1_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_SPI1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI1_Init+0x64>)
 80005ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI1_Init+0x64>)
 80005f4:	2210      	movs	r2, #16
 80005f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_SPI1_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI1_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_SPI1_Init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI1_Init+0x64>)
 800060c:	220a      	movs	r2, #10
 800060e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_SPI1_Init+0x64>)
 8000612:	f001 fb41 	bl	8001c98 <HAL_SPI_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800061c:	f000 f910 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000028 	.word	0x20000028
 8000628:	40013000 	.word	0x40013000

0800062c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <MX_SPI2_Init+0x60>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI2_Init+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI2_Init+0x5c>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_SPI2_Init+0x5c>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_SPI2_Init+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000670:	220a      	movs	r2, #10
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_SPI2_Init+0x5c>)
 8000676:	f001 fb0f 	bl	8001c98 <HAL_SPI_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f8de 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000080 	.word	0x20000080
 800068c:	40003800 	.word	0x40003800

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <MX_TIM2_Init+0xec>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <MX_TIM2_Init+0xec>)
 80006ca:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80006ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_TIM2_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <MX_TIM2_Init+0xec>)
 80006d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_TIM2_Init+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_TIM2_Init+0xec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ea:	4824      	ldr	r0, [pc, #144]	; (800077c <MX_TIM2_Init+0xec>)
 80006ec:	f002 f9f3 	bl	8002ad6 <HAL_TIM_Base_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006f6:	f000 f8a3 	bl	8000840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000704:	4619      	mov	r1, r3
 8000706:	481d      	ldr	r0, [pc, #116]	; (800077c <MX_TIM2_Init+0xec>)
 8000708:	f002 fcb0 	bl	800306c <HAL_TIM_ConfigClockSource>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000712:	f000 f895 	bl	8000840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_TIM2_Init+0xec>)
 8000718:	f002 fa9c 	bl	8002c54 <HAL_TIM_PWM_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 f88d 	bl	8000840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4619      	mov	r1, r3
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <MX_TIM2_Init+0xec>)
 8000736:	f003 f889 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000740:	f000 f87e 	bl	8000840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000744:	2360      	movs	r3, #96	; 0x60
 8000746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8000748:	f240 33e7 	movw	r3, #999	; 0x3e7
 800074c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <MX_TIM2_Init+0xec>)
 800075e:	f002 fbc3 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000768:	f000 f86a 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <MX_TIM2_Init+0xec>)
 800076e:	f000 f969 	bl	8000a44 <HAL_TIM_MspPostInit>

}
 8000772:	bf00      	nop
 8000774:	3738      	adds	r7, #56	; 0x38
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000d8 	.word	0x200000d8

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_GPIO_Init+0xb8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a26      	ldr	r2, [pc, #152]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_GPIO_Init+0xb8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0xbc>)
 800080e:	f000 fdc5 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000812:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xbc>)
 800082c:	f000 fc1a 	bl	8001064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020c00 	.word	0x40020c00

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 fb86 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a49      	ldr	r2, [pc, #292]	; (80009e0 <HAL_SPI_MspInit+0x144>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d134      	bne.n	8000928 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b48      	ldr	r3, [pc, #288]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a47      	ldr	r2, [pc, #284]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a40      	ldr	r2, [pc, #256]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f6:	23e0      	movs	r3, #224	; 0xe0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4835      	ldr	r0, [pc, #212]	; (80009e8 <HAL_SPI_MspInit+0x14c>)
 8000912:	f000 fba7 	bl	8001064 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2023      	movs	r0, #35	; 0x23
 800091c:	f000 fb49 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000920:	2023      	movs	r0, #35	; 0x23
 8000922:	f000 fb62 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000926:	e057      	b.n	80009d8 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <HAL_SPI_MspInit+0x150>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d152      	bne.n	80009d8 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_SPI_MspInit+0x148>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80009a2:	f000 fb5f 	bl	8001064 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2305      	movs	r3, #5
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <HAL_SPI_MspInit+0x158>)
 80009c4:	f000 fb4e 	bl	8001064 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2024      	movs	r0, #36	; 0x24
 80009ce:	f000 faf0 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009d2:	2024      	movs	r0, #36	; 0x24
 80009d4:	f000 fb09 	bl	8000fea <HAL_NVIC_EnableIRQ>
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40013000 	.word	0x40013000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40003800 	.word	0x40003800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020400 	.word	0x40020400

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a08:	d115      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f000 fac1 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 fada 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d11d      	bne.n	8000aa2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_MspPostInit+0x68>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <HAL_TIM_MspPostInit+0x6c>)
 8000a9e:	f000 fae1 	bl	8001064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f95c 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	static uint8_t sequence_index = 0;
	  static const uint8_t sequence[] = {1, 3, 7, 12};

	  trans_var = sequence[sequence_index];
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <TIM2_IRQHandler+0x44>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <TIM2_IRQHandler+0x48>)
 8000b14:	5c9a      	ldrb	r2, [r3, r2]
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <TIM2_IRQHandler+0x4c>)
 8000b18:	701a      	strb	r2, [r3, #0]
	  sequence_index = (sequence_index + 1) % (sizeof(sequence) / sizeof(sequence[0]));
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <TIM2_IRQHandler+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <TIM2_IRQHandler+0x44>)
 8000b2a:	701a      	strb	r2, [r3, #0]

  HAL_SPI_Transmit(&hspi1, &trans_var, 1, 100);
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4908      	ldr	r1, [pc, #32]	; (8000b54 <TIM2_IRQHandler+0x4c>)
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <TIM2_IRQHandler+0x50>)
 8000b34:	f001 f939 	bl	8001daa <HAL_SPI_Transmit>

  HAL_SPI_Receive_IT(&hspi2, &received_var, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <TIM2_IRQHandler+0x54>)
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <TIM2_IRQHandler+0x58>)
 8000b3e:	f001 fa77 	bl	8002030 <HAL_SPI_Receive_IT>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b42:	4808      	ldr	r0, [pc, #32]	; (8000b64 <TIM2_IRQHandler+0x5c>)
 8000b44:	f002 f8df 	bl	8002d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000122 	.word	0x20000122
 8000b50:	080039dc 	.word	0x080039dc
 8000b54:	20000120 	.word	0x20000120
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	20000121 	.word	0x20000121
 8000b60:	20000080 	.word	0x20000080
 8000b64:	200000d8 	.word	0x200000d8

08000b68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <SPI1_IRQHandler+0x10>)
 8000b6e:	f001 fb8d 	bl	800228c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000028 	.word	0x20000028

08000b7c <SPI2_IRQHandler>:

/** HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	//		if(received_var == 1 ){
	//	        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	//
	//		}

		        switch(received_var)
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <SPI2_IRQHandler+0x118>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	2b0b      	cmp	r3, #11
 8000b88:	d87e      	bhi.n	8000c88 <SPI2_IRQHandler+0x10c>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <SPI2_IRQHandler+0x14>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000bc1 	.word	0x08000bc1
 8000b94:	08000c89 	.word	0x08000c89
 8000b98:	08000bf3 	.word	0x08000bf3
 8000b9c:	08000c89 	.word	0x08000c89
 8000ba0:	08000c89 	.word	0x08000c89
 8000ba4:	08000c89 	.word	0x08000c89
 8000ba8:	08000c25 	.word	0x08000c25
 8000bac:	08000c89 	.word	0x08000c89
 8000bb0:	08000c89 	.word	0x08000c89
 8000bb4:	08000c89 	.word	0x08000c89
 8000bb8:	08000c89 	.word	0x08000c89
 8000bbc:	08000c57 	.word	0x08000c57
		        {
		        case 1:
		     	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc6:	4834      	ldr	r0, [pc, #208]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000bc8:	f000 fbe8 	bl	800139c <HAL_GPIO_WritePin>
		     	   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd2:	4831      	ldr	r0, [pc, #196]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000bd4:	f000 fbe2 	bl	800139c <HAL_GPIO_WritePin>
		     	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bde:	482e      	ldr	r0, [pc, #184]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000be0:	f000 fbdc 	bl	800139c <HAL_GPIO_WritePin>
		     	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	482b      	ldr	r0, [pc, #172]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000bec:	f000 fbd6 	bl	800139c <HAL_GPIO_WritePin>
		        	break;
 8000bf0:	e04b      	b.n	8000c8a <SPI2_IRQHandler+0x10e>
		        case 3:
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf8:	4827      	ldr	r0, [pc, #156]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000bfa:	f000 fbcf 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	4824      	ldr	r0, [pc, #144]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c06:	f000 fbc9 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c12:	f000 fbc3 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c1e:	f000 fbbd 	bl	800139c <HAL_GPIO_WritePin>
		        	        	break;
 8000c22:	e032      	b.n	8000c8a <SPI2_IRQHandler+0x10e>
		        case 7:
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c2c:	f000 fbb6 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c38:	f000 fbb0 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c42:	4815      	ldr	r0, [pc, #84]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c44:	f000 fbaa 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c50:	f000 fba4 	bl	800139c <HAL_GPIO_WritePin>
		        	        	break;
 8000c54:	e019      	b.n	8000c8a <SPI2_IRQHandler+0x10e>
		        case 12:
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c5e:	f000 fb9d 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c6a:	f000 fb97 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c76:	f000 fb91 	bl	800139c <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <SPI2_IRQHandler+0x11c>)
 8000c82:	f000 fb8b 	bl	800139c <HAL_GPIO_WritePin>
		        	        	break;
 8000c86:	e000      	b.n	8000c8a <SPI2_IRQHandler+0x10e>
		        default : break;
 8000c88:	bf00      	nop
		        }



  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c8a:	4804      	ldr	r0, [pc, #16]	; (8000c9c <SPI2_IRQHandler+0x120>)
 8000c8c:	f001 fafe 	bl	800228c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000121 	.word	0x20000121
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	20000080 	.word	0x20000080

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 fe43 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fbe5 	bl	80004c4 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	08003a00 	.word	0x08003a00
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000128 	.word	0x20000128

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f92b 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fd7e 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f943 	bl	8001006 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f90b 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000124 	.word	0x20000124

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000124 	.word	0x20000124

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d004      	beq.n	800103c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e00c      	b.n	8001056 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2205      	movs	r2, #5
 8001040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e16b      	b.n	8001358 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 815a 	bne.w	8001352 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80b4 	beq.w	8001352 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a5f      	ldr	r2, [pc, #380]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <HAL_GPIO_Init+0x30c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <HAL_GPIO_Init+0x310>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x226>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x222>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x21e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x324>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x216>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x328>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x32c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x330>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x20a>
 800126a:	2307      	movs	r3, #7
 800126c:	e00e      	b.n	800128c <HAL_GPIO_Init+0x228>
 800126e:	2308      	movs	r3, #8
 8001270:	e00c      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001272:	2306      	movs	r3, #6
 8001274:	e00a      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001276:	2305      	movs	r3, #5
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x228>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x228>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x228>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x310>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_GPIO_Init+0x334>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x334>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_GPIO_Init+0x334>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_GPIO_Init+0x334>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f ae90 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e267      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e242      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a68      	ldr	r2, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcac 	bl	8000de4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fca8 	bl	8000de4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e207      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc98 	bl	8000de4 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc94 	bl	8000de4 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1f3      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc4d 	bl	8000de4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc49 	bl	8000de4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a8      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4925      	ldr	r1, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc2c 	bl	8000de4 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc28 	bl	8000de4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e187      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d036      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc0c 	bl	8000de4 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc08 	bl	8000de4 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e167      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbf5 	bl	8000de4 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00e      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fbf1 	bl	8000de4 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d907      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e150      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ea      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8097 	beq.w	8001764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a7c      	ldr	r2, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b77      	ldr	r3, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fbb1 	bl	8000de4 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fbad 	bl	8000de4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e10c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x30c>
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d015      	beq.n	8001728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb72 	bl	8000de4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb6e 	bl	8000de4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0cb      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x334>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fb5c 	bl	8000de4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb58 	bl	8000de4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0b5      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d05c      	beq.n	8001834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb2c 	bl	8000de4 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fb28 	bl	8000de4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e087      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fb01 	bl	8000de4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fafd 	bl	8000de4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x416>
 8001804:	e054      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff faea 	bl	8000de4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fae6 	bl	8000de4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e038      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d121      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11a      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fa18 	bl	8000de4 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fa14 	bl	8000de4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f978 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	080039e0 	.word	0x080039e0
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	; 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	024b      	lsls	r3, r1, #9
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b88:	4621      	mov	r1, r4
 8001b8a:	024a      	lsls	r2, r1, #9
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9c:	f7fe fb14 	bl	80001c8 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe faba 	bl	80001c8 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	; 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07b      	b.n	8001da2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d108      	bne.n	8001cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cba:	d009      	beq.n	8001cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
 8001cc2:	e005      	b.n	8001cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fdd6 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	ea42 0103 	orr.w	r1, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	f003 0104 	and.w	r1, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0210 	and.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b088      	sub	sp, #32
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_SPI_Transmit+0x22>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e12d      	b.n	8002028 <HAL_SPI_Transmit+0x27e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dd4:	f7ff f806 	bl	8000de4 <HAL_GetTick>
 8001dd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
 8001dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dee:	e116      	b.n	800201e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_SPI_Transmit+0x52>
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e00:	e10d      	b.n	800201e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	88fa      	ldrh	r2, [r7, #6]
 8001e1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	88fa      	ldrh	r2, [r7, #6]
 8001e20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e48:	d10f      	bne.n	8001e6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d007      	beq.n	8001e88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	d14f      	bne.n	8001f32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_SPI_Transmit+0xf6>
 8001e9a:	8afb      	ldrh	r3, [r7, #22]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d142      	bne.n	8001f26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	1c9a      	adds	r2, r3, #2
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ec4:	e02f      	b.n	8001f26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d112      	bne.n	8001efa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	1c9a      	adds	r2, r3, #2
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ef8:	e015      	b.n	8001f26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001efa:	f7fe ff73 	bl	8000de4 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d803      	bhi.n	8001f12 <HAL_SPI_Transmit+0x168>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d102      	bne.n	8001f18 <HAL_SPI_Transmit+0x16e>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f24:	e07b      	b.n	800201e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ca      	bne.n	8001ec6 <HAL_SPI_Transmit+0x11c>
 8001f30:	e050      	b.n	8001fd4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Transmit+0x196>
 8001f3a:	8afb      	ldrh	r3, [r7, #22]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d144      	bne.n	8001fca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f66:	e030      	b.n	8001fca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d113      	bne.n	8001f9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f9c:	e015      	b.n	8001fca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f9e:	f7fe ff21 	bl	8000de4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d803      	bhi.n	8001fb6 <HAL_SPI_Transmit+0x20c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d102      	bne.n	8001fbc <HAL_SPI_Transmit+0x212>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001fc8:	e029      	b.n	800201e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1c9      	bne.n	8001f68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fc75 	bl	80028c8 <SPI_EndRxTxTransaction>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	77fb      	strb	r3, [r7, #31]
 8002014:	e003      	b.n	800201e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002026:	7ffb      	ldrb	r3, [r7, #31]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002052:	e07f      	b.n	8002154 <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d110      	bne.n	800207e <HAL_SPI_Receive_IT+0x4e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002064:	d10b      	bne.n	800207e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2204      	movs	r2, #4
 800206a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f877 	bl	8002168 <HAL_SPI_TransmitReceive_IT>
 800207a:	4603      	mov	r3, r0
 800207c:	e06b      	b.n	8002156 <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_SPI_Receive_IT+0x5a>
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800208e:	e061      	b.n	8002154 <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_SPI_Receive_IT+0x6e>
 800209a:	2302      	movs	r3, #2
 800209c:	e05b      	b.n	8002156 <HAL_SPI_Receive_IT+0x126>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2204      	movs	r2, #4
 80020aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_SPI_Receive_IT+0x130>)
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
 80020ec:	e002      	b.n	80020f4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_SPI_Receive_IT+0x134>)
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fc:	d10f      	bne.n	800211e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800211c:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d007      	beq.n	800213c <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002152:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002154:	7dfb      	ldrb	r3, [r7, #23]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	080026a5 	.word	0x080026a5
 8002164:	0800265b 	.word	0x0800265b

08002168 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002180:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002188:	7dbb      	ldrb	r3, [r7, #22]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d00d      	beq.n	80021aa <HAL_SPI_TransmitReceive_IT+0x42>
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002194:	d106      	bne.n	80021a4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_SPI_TransmitReceive_IT+0x3c>
 800219e:	7dbb      	ldrb	r3, [r7, #22]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
 80021a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021a8:	e061      	b.n	800226e <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_SPI_TransmitReceive_IT+0x54>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_SPI_TransmitReceive_IT+0x54>
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021c0:	e055      	b.n	800226e <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_SPI_TransmitReceive_IT+0x68>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e04f      	b.n	8002270 <HAL_SPI_TransmitReceive_IT+0x108>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d003      	beq.n	80021ec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2205      	movs	r2, #5
 80021e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_SPI_TransmitReceive_IT+0x114>)
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_SPI_TransmitReceive_IT+0x118>)
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
 800222a:	e005      	b.n	8002238 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d007      	beq.n	8002256 <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800226c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	0800259d 	.word	0x0800259d
 8002280:	080025fd 	.word	0x080025fd
 8002284:	080024d9 	.word	0x080024d9
 8002288:	0800253d 	.word	0x0800253d

0800228c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10e      	bne.n	80022cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    return;
 80022ca:	e0ce      	b.n	800246a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_SPI_IRQHandler+0x5e>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
    return;
 80022e8:	e0bf      	b.n	800246a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_SPI_IRQHandler+0x7e>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80b0 	beq.w	800246a <HAL_SPI_IRQHandler+0x1de>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80aa 	beq.w	800246a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d011      	beq.n	8002350 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	f043 0204 	orr.w	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	e00b      	b.n	8002368 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
        return;
 8002366:	e080      	b.n	800246a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d014      	beq.n	800239c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f043 0208 	orr.w	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d04f      	beq.n	8002468 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_SPI_IRQHandler+0x168>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d034      	beq.n	800245e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0203 	bic.w	r2, r2, #3
 8002402:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d011      	beq.n	8002430 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_SPI_IRQHandler+0x1e4>)
 8002412:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fe00 	bl	800101e <HAL_DMA_Abort_IT>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_SPI_IRQHandler+0x1e4>)
 800243e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fdea 	bl	800101e <HAL_DMA_Abort_IT>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800245c:	e003      	b.n	8002466 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f81c 	bl	800249c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002464:	e000      	b.n	8002468 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002466:	bf00      	nop
    return;
 8002468:	bf00      	nop
  }
}
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	080024b1 	.word	0x080024b1

08002474 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f7ff ffe6 	bl	800249c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f103 020c 	add.w	r2, r3, #12
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002522:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa1e 	bl	8002970 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002582:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9ee 	bl	8002970 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	b292      	uxth	r2, r2
 80025b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9be 	bl	8002970 <SPI_CloseRxTx_ISR>
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	881a      	ldrh	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	1c9a      	adds	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f98f 	bl	8002970 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f103 020c 	add.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f9de 	bl	8002a58 <SPI_CloseRx_ISR>
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	b292      	uxth	r2, r2
 80026b8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f9bb 	bl	8002a58 <SPI_CloseRx_ISR>
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026fc:	f7fe fb72 	bl	8000de4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800270c:	f7fe fb6a 	bl	8000de4 <HAL_GetTick>
 8002710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	015b      	lsls	r3, r3, #5
 8002718:	0d1b      	lsrs	r3, r3, #20
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002722:	e054      	b.n	80027ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d050      	beq.n	80027ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800272c:	f7fe fb5a 	bl	8000de4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	d902      	bls.n	8002742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d13d      	bne.n	80027be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275a:	d111      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002764:	d004      	beq.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d107      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	d10f      	bne.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e017      	b.n	80027ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4013      	ands	r3, r2
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d19b      	bne.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002810:	d111      	bne.n	8002836 <SPI_EndRxTransaction+0x3a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	d004      	beq.n	8002826 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002824:	d107      	bne.n	8002836 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283e:	d12a      	bne.n	8002896 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d012      	beq.n	8002870 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2200      	movs	r2, #0
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff49 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02d      	beq.n	80028bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e026      	b.n	80028be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	2101      	movs	r1, #1
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff ff36 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01a      	beq.n	80028bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e013      	b.n	80028be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	2101      	movs	r1, #1
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff23 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e000      	b.n	80028be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2201      	movs	r2, #1
 80028dc:	2102      	movs	r1, #2
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff ff04 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e032      	b.n	8002960 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <SPI_EndRxTxTransaction+0xa0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <SPI_EndRxTxTransaction+0xa4>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	0d5b      	lsrs	r3, r3, #21
 8002906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002918:	d112      	bne.n	8002940 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fee1 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e00f      	b.n	8002960 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3b01      	subs	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d0f2      	beq.n	8002940 <SPI_EndRxTxTransaction+0x78>
 800295a:	e000      	b.n	800295e <SPI_EndRxTxTransaction+0x96>
        break;
 800295c:	bf00      	nop
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000000 	.word	0x20000000
 800296c:	165e9f81 	.word	0x165e9f81

08002970 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <SPI_CloseRxTx_ISR+0xe0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <SPI_CloseRxTx_ISR+0xe4>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0a5b      	lsrs	r3, r3, #9
 8002984:	2264      	movs	r2, #100	; 0x64
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800298c:	f7fe fa2a 	bl	8000de4 <HAL_GetTick>
 8002990:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0220 	bic.w	r2, r2, #32
 80029a0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029b4:	e009      	b.n	80029ca <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0eb      	beq.n	80029a2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	2164      	movs	r1, #100	; 0x64
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ff7a 	bl	80028c8 <SPI_EndRxTxTransaction>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d115      	bne.n	8002a38 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fd27 	bl	8002474 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002a26:	e00e      	b.n	8002a46 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fd29 	bl	8002488 <HAL_SPI_TxRxCpltCallback>
}
 8002a36:	e006      	b.n	8002a46 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fd2b 	bl	800249c <HAL_SPI_ErrorCallback>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000
 8002a54:	057619f1 	.word	0x057619f1

08002a58 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002a70:	f7fe f9b8 	bl	8000de4 <HAL_GetTick>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	2164      	movs	r1, #100	; 0x64
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff febe 	bl	80027fc <SPI_EndRxTransaction>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0220 	orr.w	r2, r3, #32
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fcd7 	bl	8002474 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002ac6:	e002      	b.n	8002ace <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fce7 	bl	800249c <HAL_SPI_ErrorCallback>
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e041      	b.n	8002b6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7fd ff7b 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 fba3 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04e      	b.n	8002c2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d022      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d01d      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d018      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d009      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d111      	bne.n	8002c18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d010      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c16:	e007      	b.n	8002c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40010400 	.word	0x40010400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40001800 	.word	0x40001800

08002c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f839 	bl	8002cf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fae4 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01b      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0202 	mvn.w	r2, #2
 8002d3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa66 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002d56:	e005      	b.n	8002d64 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa58 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa69 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01b      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0204 	mvn.w	r2, #4
 8002d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa40 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002da2:	e005      	b.n	8002db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa32 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa43 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01b      	beq.n	8002e02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f06f 0208 	mvn.w	r2, #8
 8002dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fa1a 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002dee:	e005      	b.n	8002dfc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa0c 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa1d 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01b      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0210 	mvn.w	r2, #16
 8002e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2208      	movs	r2, #8
 8002e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9f4 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8002e3a:	e005      	b.n	8002e48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9e6 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9f7 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0201 	mvn.w	r2, #1
 8002e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9c4 	bl	80031fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fd61 	bl	8003958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f9c8 	bl	800324a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0220 	mvn.w	r2, #32
 8002ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fd33 	bl	8003944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0ae      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	f200 809f 	bhi.w	8003054 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08003055 	.word	0x08003055
 8002f24:	08003055 	.word	0x08003055
 8002f28:	08003055 	.word	0x08003055
 8002f2c:	08002f91 	.word	0x08002f91
 8002f30:	08003055 	.word	0x08003055
 8002f34:	08003055 	.word	0x08003055
 8002f38:	08003055 	.word	0x08003055
 8002f3c:	08002fd3 	.word	0x08002fd3
 8002f40:	08003055 	.word	0x08003055
 8002f44:	08003055 	.word	0x08003055
 8002f48:	08003055 	.word	0x08003055
 8002f4c:	08003013 	.word	0x08003013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa2e 	bl	80033b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0208 	orr.w	r2, r2, #8
 8002f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0204 	bic.w	r2, r2, #4
 8002f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	619a      	str	r2, [r3, #24]
      break;
 8002f8e:	e064      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fa7e 	bl	8003498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6999      	ldr	r1, [r3, #24]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	021a      	lsls	r2, r3, #8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	619a      	str	r2, [r3, #24]
      break;
 8002fd0:	e043      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fad3 	bl	8003584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0208 	orr.w	r2, r2, #8
 8002fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0204 	bic.w	r2, r2, #4
 8002ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	61da      	str	r2, [r3, #28]
      break;
 8003010:	e023      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fb27 	bl	800366c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800303c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	021a      	lsls	r2, r3, #8
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	61da      	str	r2, [r3, #28]
      break;
 8003052:	e002      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
      break;
 8003058:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIM_ConfigClockSource+0x1c>
 8003084:	2302      	movs	r3, #2
 8003086:	e0b4      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x186>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d03e      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0xd4>
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	f200 8087 	bhi.w	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	f000 8086 	beq.w	80031de <HAL_TIM_ConfigClockSource+0x172>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d87f      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030d8:	2b70      	cmp	r3, #112	; 0x70
 80030da:	d01a      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0xa6>
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d87b      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d050      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x11a>
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d877      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d03c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xfa>
 80030ec:	2b50      	cmp	r3, #80	; 0x50
 80030ee:	d873      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d058      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x13a>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d86f      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d064      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d86b      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d060      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d867      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05c      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15a>
 800310c:	2b10      	cmp	r3, #16
 800310e:	d05a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	e062      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003122:	f000 fb73 	bl	800380c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	609a      	str	r2, [r3, #8]
      break;
 800313e:	e04f      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	f000 fb5c 	bl	800380c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003162:	609a      	str	r2, [r3, #8]
      break;
 8003164:	e03c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fad0 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2150      	movs	r1, #80	; 0x50
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fb29 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003184:	e02c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	f000 faef 	bl	8003776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2160      	movs	r1, #96	; 0x60
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb19 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031a4:	e01c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 fab0 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fb09 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031c4:	e00c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f000 fb00 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031d6:	e003      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
      break;
 80031dc:	e000      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a46      	ldr	r2, [pc, #280]	; (800338c <TIM_Base_SetConfig+0x12c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a43      	ldr	r2, [pc, #268]	; (8003390 <TIM_Base_SetConfig+0x130>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a42      	ldr	r2, [pc, #264]	; (8003394 <TIM_Base_SetConfig+0x134>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a41      	ldr	r2, [pc, #260]	; (8003398 <TIM_Base_SetConfig+0x138>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <TIM_Base_SetConfig+0x13c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <TIM_Base_SetConfig+0x12c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d027      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a32      	ldr	r2, [pc, #200]	; (8003390 <TIM_Base_SetConfig+0x130>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d023      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <TIM_Base_SetConfig+0x134>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a30      	ldr	r2, [pc, #192]	; (8003398 <TIM_Base_SetConfig+0x138>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0x13c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <TIM_Base_SetConfig+0x140>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <TIM_Base_SetConfig+0x144>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x148>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x14c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x150>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x154>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <TIM_Base_SetConfig+0x12c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <TIM_Base_SetConfig+0x13c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]
  }
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40010400 	.word	0x40010400
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800
 80033ac:	40001800 	.word	0x40001800
 80033b0:	40001c00 	.word	0x40001c00
 80033b4:	40002000 	.word	0x40002000

080033b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 0201 	bic.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0302 	bic.w	r3, r3, #2
 8003400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a20      	ldr	r2, [pc, #128]	; (8003490 <TIM_OC1_SetConfig+0xd8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC1_SetConfig+0x64>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <TIM_OC1_SetConfig+0xdc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC1_SetConfig+0xd8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC1_SetConfig+0x8e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <TIM_OC1_SetConfig+0xdc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d111      	bne.n	800346a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40010000 	.word	0x40010000
 8003494:	40010400 	.word	0x40010400

08003498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 0210 	bic.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_OC2_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC2_SetConfig+0x68>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_OC2_SetConfig+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10d      	bne.n	800351c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <TIM_OC2_SetConfig+0xe4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC2_SetConfig+0x94>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <TIM_OC2_SetConfig+0xe8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d113      	bne.n	8003554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400

08003584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC3_SetConfig+0x66>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3_SetConfig+0x92>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000
 8003668:	40010400 	.word	0x40010400

0800366c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_OC4_SetConfig+0xa4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x68>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <TIM_OC4_SetConfig+0xa8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 030a 	bic.w	r3, r3, #10
 8003754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 0210 	bic.w	r2, r3, #16
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	031b      	lsls	r3, r3, #12
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e05a      	b.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a21      	ldr	r2, [pc, #132]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d022      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d01d      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d018      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a15      	ldr	r2, [pc, #84]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10c      	bne.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40001800 	.word	0x40001800

08003944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4d0d      	ldr	r5, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2600      	movs	r6, #0
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4d0b      	ldr	r5, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 f818 	bl	80039c4 <_init>
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2600      	movs	r6, #0
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	080039f8 	.word	0x080039f8
 80039b8:	080039f8 	.word	0x080039f8
 80039bc:	080039f8 	.word	0x080039f8
 80039c0:	080039fc 	.word	0x080039fc

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr
